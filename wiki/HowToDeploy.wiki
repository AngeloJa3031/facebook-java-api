#summary Deploying SNAPSHOT and release builds to Maven repositories and creating .zip packages to be posted onto this site as featured downloads.

=Getting SNAPSHOT releases=

While a handful of developers may want to post snapshot releases, a larger number of users may want to get hold of a particular snapshot release. This section explains what, why and how.

==What's a snapshot Maven release==

Snapshot releases are identified clearly with version numbers ending in _-SNAPSHOT_. Version 3.0.0-SNAPSHOT means "this version is a candidate to eventually become version 3.0.0". Your Maven client handles snapshot releases differently to full releases; it tries to download a new version by default every day (this can be controlled by the `<snapshots><updatePolicy/></snapshots>` flag.

==Why would I want to use a snapshot release==

If a bug that you've reported has just been fixed by a developer, the developer may have pushed a snapshot release to the snapshot repository. By switching from your full release to the snapshot, you'll be able to take advantage of the bug fix or new feature before a full release is cut.

Furthermore, you're being a good citizen and helping to identify and issues that may have crept into the codebase due to recent code changes. Hopefully the JUnit tests will catch any "regressions", but then hopefully I'll win Â£1million this week in the lottery.

==OK, how do I get at snapshot releases==

Add the following snippet to your repository's pom.xml. It points to the /maven-snapshot file store that Fernando hosts at his happyfern.com site.

{{{
<repositories>
    ...
    ...

    <repository>
        <id>facebook-api-snapshot</id>
        <name>Facebook API Snapshot repository</name>
        <url>http://mrepo.happyfern.com/maven2-snapshot/</url>
        <snapshots>
            <enabled>true</enabled>
        </snapshots>
    </repository>

</repositories>
}}}

Then, in your dependencies just name the specific snapshot release that you want. For example:

{{{
    <dependency>
        <groupId>com.google.code.facebookapi</groupId>
        <artifactId>facebook-java-api</artifactId>
        <version>3.0.0-SNAPSHOT</version>
    </dependency>
}}}

=Deploying SNAPSHOT releases=

Once you've got source code that you've managed to clean (to ensure that all the build steps are working) and install into your local repository, you're ready to upload a snapshot release.

It's neighbourly to also post a jar of your current source code onto the snapshot repository along with your .jar binaries. Snapshot releases change quite frequently so users will probably want to use Eclipse's `Right Click --> Maven --> Download Sources` so that when debugging they can see exactly what code was posted up most recently.

Ensure that the following version numbers are consistent and have -SNAPSHOT on them. It's the -SNAPSHOT which will allow Maven to decide that it wants to deploy to the snapshot repository:
  * Parent pom.xml
  * facebook-java-api pom.xml (version and parent version reference)
  * facebook-java-api-schema pom.xml (version and parent version reference)

Run the following command to deploy the snapshot:

`mvn clean install source:jar deploy`

==Permissions to upload to happyfern.com==

We use SFTP (SSH) to copy files up to the snapshot repository. A public / private keypair to authenticate you. If you wish to upload files, your public key must be registered at happyfern.com. Post a message on the Java Facebook API group requesting access to the snapshot repository and include your public key as an attached file (obviously, don't include your private key); an administrator will approve you and add your credentials to the list of authorised users.

===Generating a keypair===

PuttyGen from http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html is a good tool for creating a keypair. When using this tool, select:
Type of key to generate: SSH-2 DSA

Save your public key ready to send off for approval and save your private key somewhere safe. Then, use the _Conversions_ menu to _Export OpenSSH key_. You'll need to save this as file ~/.ssh/id_dsa (where ~ is your home directory). Copy your public key to ~/.ssh/id_dsa.pub

_note: Windows Explorer won't let you create a directory called ".ssh". Go to the command prompt and use mkdir to create it_

_note: You are prompted to put a pass phrase on your private key. Do that, but if you have any problems in later steps then it may be worth trying things without a pass phrase just to eliminate that as a possible cause of problems_

If you're running Linux or similar, you should already have ssh installed and should be able to test whether you can ssh to mrepo.happyfern.com. If you're running on Windows, it's best to download this version of OpenSSH for Windows http://sshwindows.sourceforge.net/download/ and use that to try to ssh to mrepo.happyfern.com. Using putty doesn't help. Putty maintains all it's known_hosts and certificates in the Windows registry. The Maven Wagon SSH implementation uses the ~/.ssh configuration and that's what you need to setup with the OpenSSH tools.

Once you can connect with OpenSSH, you'll hopefully be ready to go with Maven.

=Creating release .zip files to post on this site=

`mvn clean install assembly:assembly` or just simply `mvn assembly:assembly` if you're sure the release is already clean will build the .zip file.

=Releasing to production Maven repository=

A) Maven deploy

mvn release:prepare
 - it will ask what the release version is (3 times) (should use default)
 - it will ask what the tag directory name for release will be, it should be release-#####
   (this will create a directory under /tags/release-#####)
 - it will ask what the next development version is (3 times) (should use default)

mvn release:perform
 - it will do a full build and deploy into repository
   - this will include jar files, source files and javadoc files (but not distribution file)
   - will have to have proper ssh identities setup so as to not force password or failure

B) Make up distribution zip file

cd /tags/release-#####
mvn clean install site deploy
 - do another clean install
 - build the site (for dist)
 - do another deploy

cd facebook-java-api
mvn assembly:assembly
 - build the assembly (zip distribution file)

 - DONE, you should see a message near the end like so:
   [INFO] Building zip: /local/fern/work/facebook-java-api/tags/release-#####/facebook-java-api/target/facebook-java-api-#####-bin.zip

C) Upload to Google Code
 - upload to: http://code.google.com/p/facebook-java-api/downloads/list
  - set as Featured (to show up on project homepage)
  - un feature old release (to remove from project homepage)
 - maybe mark a really old release as deprecated ( so it will not show up by default )


D) Update front page
 - update: http://code.google.com/p/facebook-java-api/admin
  - to say we have new release..


E) Update wiki
 - easier to do this through svn.
 - simply search for the previous version, and edit it as appropriate, then checkin all changes.